openapi: 3.0.0
info:
  title: Rayqueue API
  version: '0.9'

servers:
  - url: /api
    description: relative path to the API end points


paths:
  /login:
    post:
      tags: [Auth]
      summary: Return JWT token
      operationId: app.api.access.login
      description: Login procedure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              x-body-name: user
              properties:
                username:
                  type: string
                  description: Username
                password:
                  type: string
                  description: Password
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  token:
                    type: string
                    description: JWT token
  /projects:
    get:
      tags: [Projects]
      summary: Return a list of accessable projects which user is owner
      operationId: app.api.projects.find_projects
      responses:
        '200':
          description: list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Project'
      security:
      - jwt: []
    post:
      tags: [Projects]
      summary: Add a new project
      operationId: app.api.projects.add_project
      requestBody:
        description: Create a new project
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '200':
          description: Project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      security:
      - jwt: []

  /project/{project_id}:
    get:
      tags: [Projects]
      operationId: app.api.projects.get_project
      summary: Get a single project
      parameters:
      - name: project_id
        description: Project unique identifier
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Project does not exist
      security:
      - jwt: []
    put:
      tags: [Projects]
      operationId: app.api.projects.update_project
      summary: Update a project
      parameters:
      - name: project_id
        description: Project unique identifier
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        description: Update a project
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        200:
          description: Return project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Project does not exist
      security:
      - jwt: []
    delete:
      tags: [Projects]
      operationId: app.api.projects.remove_project
      summary: Remove a single project
      parameters:
      - name: project_id
        description: Project unique identifier
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Return project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          description: Project does not exist
      security:
      - jwt: []

  /image/{project_id}/model:
    post:
      summary: upload a model file
      tags: [Images]
      operationId: app.api.images.image_upload_model
      summary: Create a new image with uploading of a new model
      parameters:
      - name: project_id
        description: Project unique identifier
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        description: Model file for upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  format: binary
      responses:
        200:
          description: Return Image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewImage'
        404:
          description: Project does not exist
      security:
      - jwt: []


  /files/id/{file_id}:
    get:
      summary: Get file by ID
      tags: [Files]
      operationId: app.api.files.get_file_by_id
      parameters:
      - name: file_id
        description: File unique identifier
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: File
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: File not found
      security:
      - jwt: []



  /secret:
    get:
      summary: Return secret string
      operationId: app.api.access.get_secret
      responses:
        '200':
          description: secret response
          content:
            'text/plain':
              schema:
                type: string
      security:
      - jwt: []


components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: app.api.access.decode_token

  schemas:
    Project:
      properties:
        id:
          type: integer
        name:
          type: string
        created:
          type: string
        version:
          type: string
        status:
          type: integer
        project_type:
          type: integer
        is_public:
          type: boolean
    NewProject:
      properties:
        name:
          type: string
        version:
          type: string
        project_type:
          type: integer
        is_public:
          type: boolean
    NewImage:
      properties:
        id:
          type: integer
        user_id:
          type: integer
        project_id:
          type: integer
        model_id:
          type: integer
        created:
          type: string
